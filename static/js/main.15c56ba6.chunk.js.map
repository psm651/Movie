{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","title","className","MovieGenre","_ref3","genre","Movie","_ref","genres","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","_this","movies","movie","src_Movie","title_english","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","fetch","then","returna","json","data","catch","err","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUA8BA,SAASA,EAATC,GAAkC,IAAZC,EAAYD,EAAZC,OAAOC,EAAKF,EAALE,IAC5B,OACCC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAQC,IAAKA,EAAKK,MAAOL,EAAKM,UAAU,iBAIpD,SAASC,EAATC,GAA4B,IAAPC,EAAOD,EAAPC,MACpB,OACER,EAAAC,EAAAC,cAAA,QAAMG,UAAU,eAAeG,GAkBnBC,MAnDf,SAAAC,GAA+C,IAA/BN,EAA+BM,EAA/BN,MAAON,EAAwBY,EAAxBZ,OAAOa,EAAiBD,EAAjBC,OAAOC,EAAUF,EAAVE,SACpC,OACCZ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACdL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACfL,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAQA,EAAQC,IAAKK,KAElCJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBACdL,EAAAC,EAAAC,cAAA,UAAKE,GACLJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBACbM,EAAOE,IAAI,SAACL,EAAMM,GAAP,OAAiBd,EAAAC,EAAAC,cAACI,EAAD,CAAYE,MAAOA,EAAOO,IAAKD,OAE7Dd,EAAAC,EAAAC,cAAA,KAAGG,UAAU,kBACZL,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CACAgB,KAAOL,EACPM,QAAQ,IACRC,SAAS,OACTC,WAAS,EACTC,QAAQ,gBC4BEC,6MA7CdC,MAAQ,KAMRC,cAAgB,WAWf,OATeC,EAAKF,MAAMG,OAAOb,IAAI,SAAAc,GACpC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,CACPxB,MAAOuB,EAAME,cACV/B,OAAQ6B,EAAMG,mBACjBf,IAAKY,EAAMI,GACRpB,OAAQgB,EAAMhB,OACjBC,SAAUe,EAAMf,gBAMjBoB,gCAAa,SAAAC,IAAA,IAAAP,EAAA,OAAAQ,EAAAjC,EAAAkC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACQb,EAAKc,WADb,OACPb,EADOU,EAAAI,KAEZf,EAAKgB,SAAS,CACbf,WAHW,wBAAAU,EAAAM,SAAAT,QAOdM,SAAU,WACT,OAAOI,MAAM,iEACZC,KAAK,SAAAC,GAAO,OAAIA,EAAQC,SACxBF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKrB,SACvBsB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,yFA5B1BG,KAAKpB,8CAgCE,IACCN,EAAW0B,KAAK7B,MAAhBG,OACN,OACC1B,EAAAC,EAAAC,cAAA,OAAKG,UAAWqB,EAAS,MAAO,gBAClCA,EAAS0B,KAAK5B,gBAAkB,kBAxCjB6B,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.15c56ba6.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport LinesEllipsis from 'react-lines-ellipsis'\nimport './Movie.css';\n\nfunction Movie({title, poster,genres,synopsis}){\n\treturn (\n\t\t<div className=\"Movie\">\n\t\t\t<div className=\"Movie_Columns\">\n\t\t\t<MoviePoster poster={poster} alt={title}/>\n\t\t\t</div>\n\t\t\t<div className=\"Movie_Genres\">\n\t\t\t\t<h1>{title}</h1>\n\t\t\t\t<div className=\"Movie_Genres\">\n\t\t\t\t\t{genres.map((genre,index) => <MovieGenre genre={genre} key={index} />)}\n\t\t\t\t</div>\n\t\t\t\t<p className=\"Movie_Synopsis\">\n\t\t\t\t\t<LinesEllipsis\n\t\t\t\t\ttext= {synopsis}\n\t\t\t\t\tmaxLine='3'\n\t\t\t\t\tellipsis=' ...'\n\t\t\t\t\ttrimRight\n\t\t\t\t\tbasedOn='letters'\n\t\t\t\t\t/>\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nfunction MoviePoster({poster,alt}){\n\treturn (\n\t\t<img src={poster} alt={alt} title={alt} className=\"Movie_Poster\" />\n\t)\n}\n\nfunction MovieGenre({genre}){\n\treturn (\n\t\t\t<span className=\"Movie_Genre\">{genre}</span>\n\t\t   )\n}\nMovie.propTypes ={\n\ttitle: PropTypes.string.isRequired,\n\tposter: PropTypes.string.isRequired,\n\tgenres: PropTypes.array.isRequired,\n\tsynopsis: PropTypes.string.isRequired\n}\n\nMoviePoster.propTypes = {\n\tposter: PropTypes.string.isRequired,\n\talt: PropTypes.string.isRequired\n}\n\nMovieGenre.propTypes ={\n\tgenre: PropTypes.string.isRequired\n}\nexport default Movie;\n","import React, {Component}  from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\nclass App extends Component {\n\tstate = {\n\t}\n\tcomponentDidMount(){\n\t\tthis._getMovies();\n\t}\n\n\t_renderMovies = () => {\n\n\t\tconst movies = this.state.movies.map(movie => {\n\t\t\treturn <Movie \n\t\t\ttitle={movie.title_english}\n\t   \t\tposter={movie.medium_cover_image} \t\n\t\t\tkey={movie.id}\n\t\t   \tgenres={movie.genres}\n\t\t\tsynopsis={movie.synopsis}\n\t\t\t/>\n\t\t})\n\t\treturn movies\n\t}\n\n\t _getMovies = async() => {\n\t\tconst movies = await this._callApi()\n\t\t\tthis.setState({\n\t\t\t\tmovies\n\t\t\t})\n\t}\n\n\t_callApi =() =>{\n\t\treturn fetch('https://yts.am/api/v2/list_movies.json?sort_by=download count')\n\t\t.then(returna => returna.json())\n\t\t.then(json => json.data.movies)\n\t\t.catch(err => console.log(err))\n\n\t}\n\n\trender(){\n\t\tconst { movies } = this.state;\n\t  \treturn (\n\t    <div className={movies ? \"App\": \"App==loading\"}>\n\t\t{movies ? this._renderMovies() : 'Loading'}\n\t    </div>\n\t  );\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}